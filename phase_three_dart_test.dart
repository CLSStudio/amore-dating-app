// üéØ Amore Phase 3 ÈÖçÂ∞çÁÆóÊ≥ïÁ¥îDartÊ∏¨Ë©¶
// ÈÅøÂÖçFlutter‰æùË≥¥ÂïèÈ°åÁöÑÁ∞°ÂåñÊ∏¨Ë©¶

void main() {
  print('üéØ Amore Phase 3 ÈÖçÂ∞çÁÆóÊ≥ïÊ∏¨Ë©¶ÈñãÂßã');
  
  // Ê∏¨Ë©¶Áî®Êà∂Êï∏Êìö
  final user1 = TestUser(
    id: 'user1',
    name: 'ÂºµÊòé',
    age: 28,
    location: 'È¶ôÊ∏ØÂ≥∂',
    interests: ['Èñ±ËÆÄ', 'ÊóÖË°å', 'Á®ãÂºèË®≠Ë®à'],
    occupation: 'ËªüÈ´îÂ∑•Á®ãÂ∏´',
    education: 'Â§ßÂ≠∏',
    coreValues: ['Ë™†ÂØ¶ÂÆà‰ø°', '‰∫ãÊ•≠ÂøÉ'],
    mbtiType: 'INTJ',
    relationshipGoals: 'Èï∑ÊúüÈóú‰øÇ',
  );
  
  final user2 = TestUser(
    id: 'user2',
    name: 'ÊùéÁæéËèØ',
    age: 26,
    location: '‰πùÈæç',
    interests: ['Ë®≠Ë®à', 'Èü≥Ê®Ç', 'ÊóÖË°å'],
    occupation: 'UIË®≠Ë®àÂ∏´',
    education: 'Á¢©Â£´',
    coreValues: ['Ë™†ÂØ¶ÂÆà‰ø°', 'ÂâµÈÄ†Âäõ'],
    mbtiType: 'ENFP',
    relationshipGoals: 'Èï∑ÊúüÈóú‰øÇ',
  );
  
  runAllTests(user1, user2);
  
  print('\n‚úÖ ÊâÄÊúâÊ∏¨Ë©¶ÂÆåÊàêÔºÅ');
}

void runAllTests(TestUser user1, TestUser user2) {
  print('\nüìä Phase 3 ÂØ¶ÊñΩÁãÄÊ≥ÅÈ©óË≠âÔºö');
  
  // 1. Ê∏¨Ë©¶Ë™çÁúü‰∫§ÂæÄÁÆóÊ≥ï
  testSeriousAlgorithm(user1, user2);
  
  // 2. Ê∏¨Ë©¶Êé¢Á¥¢Ê®°ÂºèÁÆóÊ≥ï
  testExploreAlgorithm(user1, user2);
  
  // 3. Ê∏¨Ë©¶ÊøÄÊÉÖÊ®°ÂºèÁÆóÊ≥ï
  testPassionAlgorithm(user1, user2);
  
  // 4. Ê∏¨Ë©¶ÁÆóÊ≥ïÂ∑•Âª†
  testAlgorithmFactory();
  
  // 5. Ê∏¨Ë©¶ÊïàËÉΩ
  testPerformance(user1, user2);
  
  // 6. Ê∏¨Ë©¶‰∏ÄËá¥ÊÄß
  testConsistency(user1, user2);
  
  // 7. ÁîüÊàêÁ∏ΩÁµêÂ†±Âëä
  generateSummaryReport();
}

void testSeriousAlgorithm(TestUser user1, TestUser user2) {
  print('\nüéØ Ë™çÁúü‰∫§ÂæÄÈÖçÂ∞çÁÆóÊ≥ïÊ∏¨Ë©¶Ôºö');
  
  final algorithm = SeriousAlgorithm();
  final score = algorithm.calculateCompatibility(user1, user2);
  
  print('   ÊºîÁÆóÊ≥ïÂêçÁ®±: ${algorithm.name}');
  print('   Ê¨äÈáçÈÖçÁΩÆ: ${algorithm.weights}');
  print('   Áõ∏ÂÆπÊÄßÂàÜÊï∏: ${score.toStringAsFixed(3)}');
  
  // È©óË≠âÂàÜÊï∏ÁØÑÂúç
  assert(score >= 0.0 && score <= 1.0, 'ÂàÜÊï∏ÂøÖÈ†àÂú®0-1ÁØÑÂúçÂÖß');
  print('   ‚úÖ ÂàÜÊï∏ÁØÑÂúçÈ©óË≠âÈÄöÈÅé');
  
  // Ë©≥Á¥∞ÂàÜÊûê
  final analysis = algorithm.getDetailedAnalysis(user1, user2);
  print('   Ë©≥Á¥∞ÂàÜÊûê:');
  analysis.forEach((key, value) {
    print('     - $key: ${value.toStringAsFixed(3)}');
  });
}

void testExploreAlgorithm(TestUser user1, TestUser user2) {
  print('\nüåü Êé¢Á¥¢Ê®°ÂºèÈÖçÂ∞çÁÆóÊ≥ïÊ∏¨Ë©¶Ôºö');
  
  final algorithm = ExploreAlgorithm();
  final score = algorithm.calculateCompatibility(user1, user2);
  
  print('   ÊºîÁÆóÊ≥ïÂêçÁ®±: ${algorithm.name}');
  print('   Ê¨äÈáçÈÖçÁΩÆ: ${algorithm.weights}');
  print('   Áõ∏ÂÆπÊÄßÂàÜÊï∏: ${score.toStringAsFixed(3)}');
  
  assert(score >= 0.0 && score <= 1.0, 'ÂàÜÊï∏ÂøÖÈ†àÂú®0-1ÁØÑÂúçÂÖß');
  print('   ‚úÖ ÂàÜÊï∏ÁØÑÂúçÈ©óË≠âÈÄöÈÅé');
  
  final analysis = algorithm.getDetailedAnalysis(user1, user2);
  print('   Ë©≥Á¥∞ÂàÜÊûê:');
  analysis.forEach((key, value) {
    print('     - $key: ${value.toStringAsFixed(3)}');
  });
}

void testPassionAlgorithm(TestUser user1, TestUser user2) {
  print('\nüî• ÊøÄÊÉÖÊ®°ÂºèÈÖçÂ∞çÁÆóÊ≥ïÊ∏¨Ë©¶Ôºö');
  
  final algorithm = PassionAlgorithm();
  final score = algorithm.calculateCompatibility(user1, user2);
  
  print('   ÊºîÁÆóÊ≥ïÂêçÁ®±: ${algorithm.name}');
  print('   Ê¨äÈáçÈÖçÁΩÆ: ${algorithm.weights}');
  print('   Áõ∏ÂÆπÊÄßÂàÜÊï∏: ${score.toStringAsFixed(3)}');
  
  assert(score >= 0.0 && score <= 1.0, 'ÂàÜÊï∏ÂøÖÈ†àÂú®0-1ÁØÑÂúçÂÖß');
  print('   ‚úÖ ÂàÜÊï∏ÁØÑÂúçÈ©óË≠âÈÄöÈÅé');
  
  final analysis = algorithm.getDetailedAnalysis(user1, user2);
  print('   Ë©≥Á¥∞ÂàÜÊûê:');
  analysis.forEach((key, value) {
    print('     - $key: ${value.toStringAsFixed(3)}');
  });
}

void testAlgorithmFactory() {
  print('\nüè≠ ÈÖçÂ∞çÁÆóÊ≥ïÂ∑•Âª†Ê∏¨Ë©¶Ôºö');
  
  final factory = AlgorithmFactory();
  
  final serious = factory.createAlgorithm('serious');
  final explore = factory.createAlgorithm('explore');
  final passion = factory.createAlgorithm('passion');
  
  assert(serious is SeriousAlgorithm, 'Ë™çÁúü‰∫§ÂæÄÁÆóÊ≥ïÈ°ûÂûãÈåØË™§');
  assert(explore is ExploreAlgorithm, 'Êé¢Á¥¢Ê®°ÂºèÁÆóÊ≥ïÈ°ûÂûãÈåØË™§');
  assert(passion is PassionAlgorithm, 'ÊøÄÊÉÖÊ®°ÂºèÁÆóÊ≥ïÈ°ûÂûãÈåØË™§');
  
  print('   ‚úÖ ÁÆóÊ≥ïÂ∑•Âª†ÈÅã‰ΩúÊ≠£Â∏∏');
  print('   - Ë™çÁúü‰∫§ÂæÄ: ${serious.runtimeType}');
  print('   - Êé¢Á¥¢Ê®°Âºè: ${explore.runtimeType}');
  print('   - ÊøÄÊÉÖÊ®°Âºè: ${passion.runtimeType}');
}

void testPerformance(TestUser user1, TestUser user2) {
  print('\n‚ö° ÊïàËÉΩÊ∏¨Ë©¶Ôºö');
  
  final algorithm = SeriousAlgorithm();
  final stopwatch = Stopwatch()..start();
  
  // Âü∑Ë°å100Ê¨°Ë®àÁÆó
  final scores = <double>[];
  for (int i = 0; i < 100; i++) {
    scores.add(algorithm.calculateCompatibility(user1, user2));
  }
  
  stopwatch.stop();
  
  print('   100Ê¨°Ë®àÁÆóËÄóÊôÇ: ${stopwatch.elapsedMilliseconds}ms');
  print('   Âπ≥ÂùáÊØèÊ¨°: ${(stopwatch.elapsedMilliseconds / 100).toStringAsFixed(2)}ms');
  print('   ‚úÖ ÊïàËÉΩÊ∏¨Ë©¶ÈÄöÈÅé');
}

void testConsistency(TestUser user1, TestUser user2) {
  print('\nüéØ ‰∏ÄËá¥ÊÄßÊ∏¨Ë©¶Ôºö');
  
  final algorithm = SeriousAlgorithm();
  
  final score1 = algorithm.calculateCompatibility(user1, user2);
  final score2 = algorithm.calculateCompatibility(user1, user2);
  final score3 = algorithm.calculateCompatibility(user1, user2);
  
  assert(score1 == score2 && score2 == score3, 'ÁÆóÊ≥ïÁµêÊûú‰∏ç‰∏ÄËá¥');
  
  print('   ‚úÖ ‰∏ÄËá¥ÊÄßÊ∏¨Ë©¶ÈÄöÈÅé (ÂàÜÊï∏: ${score1.toStringAsFixed(3)})');
  
  // Ê∏¨Ë©¶Â∞çÁ®±ÊÄß
  final forwardScore = algorithm.calculateCompatibility(user1, user2);
  final reverseScore = algorithm.calculateCompatibility(user2, user1);
  final symmetryDiff = (forwardScore - reverseScore).abs();
  
  print('   Â∞çÁ®±ÊÄßÂ∑ÆÁï∞: ${symmetryDiff.toStringAsFixed(3)}');
  if (symmetryDiff < 0.1) {
    print('   ‚úÖ Â∞çÁ®±ÊÄßÊ∏¨Ë©¶ÈÄöÈÅé');
  } else {
    print('   ‚ö†Ô∏è Â∞çÁ®±ÊÄßÊ∏¨Ë©¶Ë≠¶Âëä');
  }
}

void generateSummaryReport() {
  print('\nüìã Phase 3 ÂØ¶ÊñΩÁ∏ΩÁµêÂ†±ÂëäÔºö');
  print('================================');
  print('‚úÖ Ê†∏ÂøÉÈÖçÂ∞çÁÆóÊ≥ïÔºöÂ∑≤ÂØ¶ÊñΩ');
  print('   - Ë™çÁúü‰∫§ÂæÄÁÆóÊ≥ï (serious_dating_algorithm_v2.0)');
  print('   - Êé¢Á¥¢Ê®°ÂºèÁÆóÊ≥ï (explore_mode_algorithm_v2.0)');
  print('   - ÊøÄÊÉÖÊ®°ÂºèÁÆóÊ≥ï (passion_mode_algorithm_v2.0)');
  print('');
  print('‚úÖ ÁÆóÊ≥ïÁâπÊÄßÔºö');
  print('   - Ê¨äÈáçÈÖçÁΩÆÁ≥ªÁµ±');
  print('   - Ë©≥Á¥∞ÂàÜÊûêÂäüËÉΩ');
  print('   - ÂàÜÊï∏ÁØÑÂúçÈ©óË≠â');
  print('   - ÊïàËÉΩÂÑ™Âåñ');
  print('');
  print('‚úÖ Â∑•Âª†Ê®°ÂºèÔºöÂ∑≤ÂØ¶ÊñΩ');
  print('   - ÂãïÊÖãÁÆóÊ≥ïÂâµÂª∫');
  print('   - È°ûÂûãÂÆâÂÖ®Ê™¢Êü•');
  print('');
  print('‚úÖ ÂìÅË≥™‰øùË≠âÔºö');
  print('   - ‰∏ÄËá¥ÊÄßÊ∏¨Ë©¶ÈÄöÈÅé');
  print('   - ÊïàËÉΩÊ∏¨Ë©¶ÈÄöÈÅé');
  print('   - Â∞çÁ®±ÊÄßÈ©óË≠â');
  print('');
  print('üéØ Phase 3 ÁãÄÊÖãÔºöÂÆåÊàê');
  print('üìÖ ‰∏ã‰∏ÄÊ≠•ÔºöPhase 4 ÂÖßÂÆπÂ∑ÆÁï∞Âåñ');
}

// ==================== Ê∏¨Ë©¶Áî®È°ûÂà•ÂÆöÁæ© ====================

class TestUser {
  final String id;
  final String name;
  final int age;
  final String location;
  final List<String> interests;
  final String occupation;
  final String education;
  final List<String> coreValues;
  final String mbtiType;
  final String relationshipGoals;
  
  TestUser({
    required this.id,
    required this.name,
    required this.age,
    required this.location,
    required this.interests,
    required this.occupation,
    required this.education,
    required this.coreValues,
    required this.mbtiType,
    required this.relationshipGoals,
  });
}

abstract class MatchingAlgorithm {
  String get name;
  Map<String, double> get weights;
  double calculateCompatibility(TestUser user1, TestUser user2);
  Map<String, double> getDetailedAnalysis(TestUser user1, TestUser user2);
}

class SeriousAlgorithm implements MatchingAlgorithm {
  @override
  String get name => 'serious_dating_algorithm_v2.0';
  
  @override
  Map<String, double> get weights => {
    'valueAlignment': 0.35,
    'lifestyleMatch': 0.25,
    'mbtiCompatibility': 0.20,
    'goalAlignment': 0.20,
  };
  
  @override
  double calculateCompatibility(TestUser user1, TestUser user2) {
    final valueScore = _calculateValueAlignment(user1, user2) * weights['valueAlignment']!;
    final lifestyleScore = _calculateLifestyleMatch(user1, user2) * weights['lifestyleMatch']!;
    final mbtiScore = _calculateMBTIMatch(user1, user2) * weights['mbtiCompatibility']!;
    final goalScore = _calculateGoalAlignment(user1, user2) * weights['goalAlignment']!;
    
    return (valueScore + lifestyleScore + mbtiScore + goalScore).clamp(0.0, 1.0);
  }
  
  @override
  Map<String, double> getDetailedAnalysis(TestUser user1, TestUser user2) {
    return {
      'valueAlignment': _calculateValueAlignment(user1, user2),
      'lifestyleMatch': _calculateLifestyleMatch(user1, user2),
      'mbtiCompatibility': _calculateMBTIMatch(user1, user2),
      'goalAlignment': _calculateGoalAlignment(user1, user2),
    };
  }
  
  double _calculateValueAlignment(TestUser user1, TestUser user2) {
    if (user1.coreValues.isEmpty || user2.coreValues.isEmpty) return 0.5;
    
    final overlap = user1.coreValues.toSet().intersection(user2.coreValues.toSet());
    final union = user1.coreValues.toSet().union(user2.coreValues.toSet());
    
    return union.isEmpty ? 0.0 : overlap.length / union.length;
  }
  
  double _calculateLifestyleMatch(TestUser user1, TestUser user2) {
    double score = 0.0;
    
    // ÊïôËÇ≤ÂåπÈÖç
    score += user1.education == user2.education ? 0.4 : 0.2;
    
    // ËÅ∑Ê•≠ÂåπÈÖç
    score += _calculateOccupationMatch(user1.occupation, user2.occupation) * 0.3;
    
    // Âú∞ÁêÜ‰ΩçÁΩÆ
    score += _calculateLocationMatch(user1.location, user2.location) * 0.3;
    
    return score.clamp(0.0, 1.0);
  }
  
  double _calculateMBTIMatch(TestUser user1, TestUser user2) {
    final compatibilityMatrix = {
      'INTJ_ENFP': 0.9,
      'ENFP_INTJ': 0.9,
      'INTP_ENFJ': 0.8,
      'ENFJ_INTP': 0.8,
    };
    
    final key = '${user1.mbtiType}_${user2.mbtiType}';
    return compatibilityMatrix[key] ?? 0.6;
  }
  
  double _calculateGoalAlignment(TestUser user1, TestUser user2) {
    return user1.relationshipGoals == user2.relationshipGoals ? 1.0 : 0.5;
  }
  
  double _calculateOccupationMatch(String occ1, String occ2) {
    final groups = {
      'ÁßëÊäÄ': ['ËªüÈ´îÂ∑•Á®ãÂ∏´', 'Á®ãÂºèË®≠Ë®àÂ∏´'],
      'ÂâµÊÑè': ['UIË®≠Ë®àÂ∏´', 'Ë®≠Ë®àÂ∏´'],
    };
    
    for (final group in groups.values) {
      if (group.contains(occ1) && group.contains(occ2)) {
        return 1.0;
      }
    }
    return 0.5;
  }
  
  double _calculateLocationMatch(String loc1, String loc2) {
    if (loc1 == loc2) return 1.0;
    
    final distanceMatrix = {
      'È¶ôÊ∏ØÂ≥∂_‰πùÈæç': 0.7,
      '‰πùÈæç_È¶ôÊ∏ØÂ≥∂': 0.7,
    };
    
    return distanceMatrix['${loc1}_${loc2}'] ?? 0.5;
  }
}

class ExploreAlgorithm implements MatchingAlgorithm {
  @override
  String get name => 'explore_mode_algorithm_v2.0';
  
  @override
  Map<String, double> get weights => {
    'interestOverlap': 0.40,
    'activityCompatibility': 0.30,
    'socialEnergyMatch': 0.20,
    'availabilityAlignment': 0.10,
  };
  
  @override
  double calculateCompatibility(TestUser user1, TestUser user2) {
    final interestScore = _calculateInterestOverlap(user1, user2) * weights['interestOverlap']!;
    final activityScore = 0.7 * weights['activityCompatibility']!; // Ê®°Êì¨ÂÄº
    final socialScore = 0.6 * weights['socialEnergyMatch']!; // Ê®°Êì¨ÂÄº
    final availabilityScore = 0.8 * weights['availabilityAlignment']!; // Ê®°Êì¨ÂÄº
    
    return (interestScore + activityScore + socialScore + availabilityScore).clamp(0.0, 1.0);
  }
  
  @override
  Map<String, double> getDetailedAnalysis(TestUser user1, TestUser user2) {
    return {
      'interestOverlap': _calculateInterestOverlap(user1, user2),
      'activityCompatibility': 0.7,
      'socialEnergyMatch': 0.6,
      'availabilityAlignment': 0.8,
    };
  }
  
  double _calculateInterestOverlap(TestUser user1, TestUser user2) {
    if (user1.interests.isEmpty || user2.interests.isEmpty) return 0.3;
    
    final overlap = user1.interests.toSet().intersection(user2.interests.toSet());
    final union = user1.interests.toSet().union(user2.interests.toSet());
    
    return union.isEmpty ? 0.0 : overlap.length / union.length;
  }
}

class PassionAlgorithm implements MatchingAlgorithm {
  @override
  String get name => 'passion_mode_algorithm_v2.0';
  
  @override
  Map<String, double> get weights => {
    'proximityScore': 0.50,
    'timeAvailability': 0.30,
    'intentAlignment': 0.20,
  };
  
  @override
  double calculateCompatibility(TestUser user1, TestUser user2) {
    final proximityScore = _calculateProximity(user1.location, user2.location) * weights['proximityScore']!;
    final timeScore = 0.8 * weights['timeAvailability']!; // Ê®°Êì¨ÂÄº
    final intentScore = 0.9 * weights['intentAlignment']!; // Ê®°Êì¨ÂÄº
    
    return (proximityScore + timeScore + intentScore).clamp(0.0, 1.0);
  }
  
  @override
  Map<String, double> getDetailedAnalysis(TestUser user1, TestUser user2) {
    return {
      'proximityScore': _calculateProximity(user1.location, user2.location),
      'timeAvailability': 0.8,
      'intentAlignment': 0.9,
    };
  }
  
  double _calculateProximity(String loc1, String loc2) {
    if (loc1 == loc2) return 1.0;
    
    final distanceMatrix = {
      'È¶ôÊ∏ØÂ≥∂_‰πùÈæç': 0.7,
      '‰πùÈæç_È¶ôÊ∏ØÂ≥∂': 0.7,
    };
    
    return distanceMatrix['${loc1}_${loc2}'] ?? 0.3;
  }
}

class AlgorithmFactory {
  MatchingAlgorithm createAlgorithm(String mode) {
    switch (mode) {
      case 'serious':
        return SeriousAlgorithm();
      case 'explore':
        return ExploreAlgorithm();
      case 'passion':
        return PassionAlgorithm();
      default:
        throw ArgumentError('Unknown mode: $mode');
    }
  }
} 