rules_version = '2';

service cloud.firestore {
  match /databases/{database}/documents {
    // 用戶檔案規則
    match /users/{userId} {
      // 用戶只能讀寫自己的檔案
      allow read, write: if request.auth != null && request.auth.uid == userId;
      
      // 其他用戶可以讀取基本信息（用於配對）
      allow read: if request.auth != null;
      
      // 用戶子集合
      match /{subcollection}/{docId} {
        allow read, write: if request.auth != null && request.auth.uid == userId;
      }
    }
    
    // 聊天室規則（優化權限）
    match /chats/{chatId} {
      // 檢查用戶是否為聊天參與者
      function isParticipant() {
        return request.auth != null && 
               (request.auth.uid in resource.data.participants || 
                request.auth.uid in request.resource.data.participants);
      }
      
      // 允許參與者訪問聊天室
      allow read, write: if request.auth != null && isParticipant();
      
      // 允許創建新聊天室
      allow create: if request.auth != null && 
                    request.auth.uid in request.resource.data.participants;
      
      // 聊天室中的消息
      match /messages/{messageId} {
        // 允許聊天參與者訪問消息
        allow read, write: if request.auth != null &&
          (request.auth.uid in get(/databases/$(database)/documents/chats/$(chatId)).data.participants);
        
        // 允許創建消息
        allow create: if request.auth != null;
      }
      
      // 聊天室中的輸入狀態
      match /typing/{userId} {
        allow read, write: if request.auth != null;
      }
    }
    
    // 聊天邀請規則（修復權限）
    match /chat_invitations/{invitationId} {
      // 邀請發送者可以創建和讀取
      allow create: if request.auth != null && 
                    request.auth.uid == request.resource.data.senderId;
      
      // 發送者和接收者都可以讀取
      allow read: if request.auth != null && 
                  (request.auth.uid == resource.data.senderId || 
                   request.auth.uid == resource.data.receiverId);
      
      // 接收者可以更新邀請狀態
      allow update: if request.auth != null && 
                    request.auth.uid == resource.data.receiverId;
      
      // 發送者可以刪除邀請
      allow delete: if request.auth != null && 
                    request.auth.uid == resource.data.senderId;
    }
    
    // 消息規則（獨立，用於不同聊天系統）
    match /messages/{messageId} {
      // 只有發送者和接收者可以讀取
      allow read: if request.auth != null && 
        (request.auth.uid == resource.data.senderId || 
         request.auth.uid == resource.data.receiverId);
      
      // 只有認證用戶可以創建消息
      allow create: if request.auth != null && 
        request.auth.uid == request.resource.data.senderId;
      
      // 只有發送者可以更新消息（編輯）
      allow update: if request.auth != null && 
        request.auth.uid == resource.data.senderId;
    }
    
    // 配對規則（安全版本）
    match /matches/{matchId} {
      // 檢查是否為配對的用戶
      function isMatchedUser() {
        return request.auth != null && 
               (request.auth.uid == resource.data.user1Id || 
                request.auth.uid == resource.data.user2Id);
      }
      
      // 只有配對的用戶可以讀寫
      allow read, write: if isMatchedUser();
      
      // 允許創建配對
      allow create: if request.auth != null;
    }
    
    // 用戶互動規則（喜歡/不喜歡）
    match /user_interactions/{interactionId} {
      // 只有當前用戶可以創建自己的互動記錄
      allow create: if request.auth != null && 
        request.auth.uid == request.resource.data.currentUserId;
      
      // 用戶可以讀取自己的互動記錄
      allow read: if request.auth != null && 
        request.auth.uid == resource.data.currentUserId;
    }
    
    // 舉報規則
    match /reports/{reportId} {
      // 認證用戶可以創建舉報
      allow create: if request.auth != null && 
        request.auth.uid == request.resource.data.reporterId;
      
      // 用戶可以讀取自己的舉報
      allow read: if request.auth != null && 
        request.auth.uid == resource.data.reporterId;
    }
    
    // 付費功能規則
    match /subscriptions/{subscriptionId} {
      // 用戶只能讀寫自己的訂閱
      allow read, write: if request.auth != null && 
        request.auth.uid == resource.data.userId;
    }
    
    // Stories 相關規則
    match /stories/{storyId} {
      // 創建者可以管理自己的 stories
      allow read, write: if request.auth != null && 
        request.auth.uid == resource.data.creatorId;
      
      // 其他用戶可以讀取公開 stories
      allow read: if request.auth != null;
    }
    
    // 用戶動態規則
    match /user_feeds/{feedId} {
      // 創建者可以管理自己的動態
      allow read, write: if request.auth != null && 
        request.auth.uid == resource.data.userId;
      
      // 其他用戶可以讀取公開動態
      allow read: if request.auth != null;
    }
    
    // AI 使用追蹤規則
    match /ai_daily_usage/{usageId} {
      allow read, write: if request.auth != null;
    }
    
    // MBTI 測試結果
    match /mbti_results/{userId} {
      allow read, write: if request.auth != null && request.auth.uid == userId;
      // 其他用戶可以讀取（用於匹配）
      allow read: if request.auth != null;
    }
    
    // 價值觀評估結果
    match /values_assessments/{userId} {
      allow read, write: if request.auth != null && request.auth.uid == userId;
      // 其他用戶可以讀取（用於匹配）
      allow read: if request.auth != null;
    }
    
    // 商業化相關集合
    match /revenue_events/{eventId} {
      allow read, write: if request.auth != null;
    }
    
    match /user_behavior/{behaviorId} {
      allow read, write: if request.auth != null;
    }
    
    match /verifications/{verificationId} {
      allow read, write: if request.auth != null;
    }
    
    match /compliance_events/{eventId} {
      allow read, write: if request.auth != null;
    }
    
    match /virtual_goods_purchases/{purchaseId} {
      allow read, write: if request.auth != null;
    }
    
    match /purchase_events/{eventId} {
      allow read, write: if request.auth != null;
    }
    
    match /support_tickets/{ticketId} {
      allow read, write: if request.auth != null;
    }
    
    match /faqs/{faqId} {
      allow read: if true; // 公開閱讀
    }
    
    match /app_errors/{errorId} {
      allow read, write: if request.auth != null;
    }
    
    // 分析數據規則（只讀）
    match /analytics/{document=**} {
      allow read: if request.auth != null;
      allow write: if false; // 只能通過服務端寫入
    }
    
    // 開發期間的兜底規則（寬鬆權限）
    match /{document=**} {
      allow read, write: if request.auth != null;
    }
  }
}