import 'package:flutter/material.dart';
import 'package:flutter_riverpod/flutter_riverpod.dart';

class AIChatPage extends ConsumerStatefulWidget {
  const AIChatPage({super.key});

  @override
  ConsumerState<AIChatPage> createState() => _AIChatPageState();
}

class _AIChatPageState extends ConsumerState<AIChatPage> {
  final TextEditingController _messageController = TextEditingController();
  final ScrollController _scrollController = ScrollController();
  final List<ChatMessage> _messages = [];

  @override
  void initState() {
    super.initState();
    _addWelcomeMessage();
  }

  void _addWelcomeMessage() {
    _messages.add(
      ChatMessage(
        text: '‰Ω†Â•ΩÔºÅÊàëÊòØ Amore AI ÊÑõÊÉÖÈ°ßÂïè üíï\n\nÊàëÂèØ‰ª•ÁÇ∫‰Ω†Êèê‰æõ‰ª•‰∏ãÊúçÂãôÔºö\n‚Ä¢ Á†¥ÂÜ∞Ë©±È°åÂª∫Ë≠∞\n‚Ä¢ Á¥ÑÊúÉË¶èÂäÉÂª∫Ë≠∞\n‚Ä¢ Â∞çË©±ÊäÄÂ∑ßÊåáÂ∞é\n‚Ä¢ Èóú‰øÇÁôºÂ±ïÂª∫Ë≠∞\n\nË´ãÂëäË®¥Êàë‰Ω†ÈúÄË¶Å‰ªÄÈ∫ºÂπ´Âä©Ôºü',
        isUser: false,
        timestamp: DateTime.now(),
        suggestions: [
          'ÊàëÈúÄË¶ÅÁ†¥ÂÜ∞Ë©±È°å',
          'Á¥ÑÊúÉÂú∞ÈªûÂª∫Ë≠∞',
          'Â¶Ç‰ΩïÈñãÂßãÂ∞çË©±',
          'Èóú‰øÇÈÄ≤Â±ïÂª∫Ë≠∞',
        ],
      ),
    );
  }

  @override
  Widget build(BuildContext context) {
    return Scaffold(
      backgroundColor: Colors.grey.shade50,
      appBar: AppBar(
        backgroundColor: Colors.white,
        elevation: 0,
        centerTitle: true,
        title: Row(
          mainAxisSize: MainAxisSize.min,
          children: [
            Container(
              width: 40,
              height: 40,
              decoration: const BoxDecoration(
                shape: BoxShape.circle,
                gradient: LinearGradient(
                  colors: [Color(0xFFE91E63), Color(0xFFAD1457)],
                ),
              ),
              child: const Icon(
                Icons.psychology,
                color: Colors.white,
                size: 24,
              ),
            ),
            const SizedBox(width: 12),
            const Column(
              crossAxisAlignment: CrossAxisAlignment.start,
              children: [
                Text(
                  'AI ÊÑõÊÉÖÈ°ßÂïè',
                  style: TextStyle(
                    fontSize: 18,
                    fontWeight: FontWeight.bold,
                    color: Color(0xFFE91E63),
                  ),
                ),
                Text(
                  '24/7 Âú®Á∑öË´ÆË©¢',
                  style: TextStyle(
                    fontSize: 12,
                    color: Colors.grey,
                  ),
                ),
              ],
            ),
          ],
        ),
        actions: [
          IconButton(
            onPressed: _showAIFeatures,
            icon: Icon(
              Icons.help_outline,
              color: Colors.grey.shade600,
            ),
          ),
        ],
      ),
      body: Column(
        children: [
          Expanded(
            child: _buildMessageList(),
          ),
          _buildInputArea(),
        ],
      ),
    );
  }

  Widget _buildMessageList() {
    return ListView.builder(
      controller: _scrollController,
      padding: const EdgeInsets.all(16),
      itemCount: _messages.length,
      itemBuilder: (context, index) {
        final message = _messages[index];
        return _buildMessageBubble(message);
      },
    );
  }

  Widget _buildMessageBubble(ChatMessage message) {
    return Padding(
      padding: const EdgeInsets.only(bottom: 16),
      child: Row(
        mainAxisAlignment: message.isUser ? MainAxisAlignment.end : MainAxisAlignment.start,
        crossAxisAlignment: CrossAxisAlignment.start,
        children: [
          if (!message.isUser) ...[
            Container(
              width: 40,
              height: 40,
              decoration: const BoxDecoration(
                shape: BoxShape.circle,
                gradient: LinearGradient(
                  colors: [Color(0xFFE91E63), Color(0xFFAD1457)],
                ),
              ),
              child: const Icon(
                Icons.psychology,
                color: Colors.white,
                size: 20,
              ),
            ),
            const SizedBox(width: 12),
          ],
          Flexible(
            child: Column(
              crossAxisAlignment: message.isUser ? CrossAxisAlignment.end : CrossAxisAlignment.start,
              children: [
                Container(
                  padding: const EdgeInsets.symmetric(horizontal: 16, vertical: 12),
                  decoration: BoxDecoration(
                    color: message.isUser
                        ? const Color(0xFFE91E63)
                        : Colors.white,
                    borderRadius: BorderRadius.circular(20).copyWith(
                      bottomLeft: message.isUser ? const Radius.circular(20) : const Radius.circular(4),
                      bottomRight: message.isUser ? const Radius.circular(4) : const Radius.circular(20),
                    ),
                    boxShadow: [
                      BoxShadow(
                        color: Colors.black.withOpacity(0.1),
                        blurRadius: 4,
                        offset: const Offset(0, 2),
                      ),
                    ],
                  ),
                  child: Text(
                    message.text,
                    style: TextStyle(
                      color: message.isUser ? Colors.white : Colors.black87,
                      fontSize: 16,
                      height: 1.4,
                    ),
                  ),
                ),
                if (message.suggestions?.isNotEmpty == true) ...[
                  const SizedBox(height: 12),
                  Wrap(
                    spacing: 8,
                    runSpacing: 8,
                    children: message.suggestions!.map((suggestion) {
                      return GestureDetector(
                        onTap: () => _sendMessage(suggestion),
                        child: Container(
                          padding: const EdgeInsets.symmetric(horizontal: 12, vertical: 8),
                          decoration: BoxDecoration(
                            color: const Color(0xFFE91E63).withOpacity(0.1),
                            borderRadius: BorderRadius.circular(20),
                            border: Border.all(
                              color: const Color(0xFFE91E63).withOpacity(0.3),
                            ),
                          ),
                          child: Text(
                            suggestion,
                            style: const TextStyle(
                              color: Color(0xFFE91E63),
                              fontSize: 14,
                              fontWeight: FontWeight.w500,
                            ),
                          ),
                        ),
                      );
                    }).toList(),
                  ),
                ],
                const SizedBox(height: 4),
                Text(
                  _formatTime(message.timestamp),
                  style: TextStyle(
                    color: Colors.grey.shade500,
                    fontSize: 12,
                  ),
                ),
              ],
            ),
          ),
          if (message.isUser) ...[
            const SizedBox(width: 12),
            CircleAvatar(
              radius: 20,
              backgroundColor: Colors.grey.shade300,
              child: Icon(
                Icons.person,
                color: Colors.grey.shade600,
              ),
            ),
          ],
        ],
      ),
    );
  }

  Widget _buildInputArea() {
    return Container(
      padding: const EdgeInsets.all(16),
      decoration: BoxDecoration(
        color: Colors.white,
        boxShadow: [
          BoxShadow(
            color: Colors.black.withOpacity(0.1),
            blurRadius: 10,
            offset: const Offset(0, -5),
          ),
        ],
      ),
      child: SafeArea(
        child: Row(
          children: [
            Expanded(
              child: Container(
                decoration: BoxDecoration(
                  color: Colors.grey.shade100,
                  borderRadius: BorderRadius.circular(25),
                ),
                child: TextField(
                  controller: _messageController,
                  decoration: const InputDecoration(
                    hintText: 'Ëº∏ÂÖ•‰Ω†ÁöÑÂïèÈ°å...',
                    border: InputBorder.none,
                    contentPadding: EdgeInsets.symmetric(horizontal: 20, vertical: 12),
                  ),
                  maxLines: null,
                  textCapitalization: TextCapitalization.sentences,
                ),
              ),
            ),
            const SizedBox(width: 12),
            GestureDetector(
              onTap: () {
                if (_messageController.text.trim().isNotEmpty) {
                  _sendMessage(_messageController.text.trim());
                }
              },
              child: Container(
                width: 48,
                height: 48,
                decoration: const BoxDecoration(
                  shape: BoxShape.circle,
                  gradient: LinearGradient(
                    colors: [Color(0xFFE91E63), Color(0xFFAD1457)],
                  ),
                ),
                child: const Icon(
                  Icons.send_rounded,
                  color: Colors.white,
                  size: 24,
                ),
              ),
            ),
          ],
        ),
      ),
    );
  }

  void _sendMessage(String text) {
    if (text.trim().isEmpty) return;

    setState(() {
      _messages.add(
        ChatMessage(
          text: text,
          isUser: true,
          timestamp: DateTime.now(),
        ),
      );
    });

    _messageController.clear();
    _scrollToBottom();

    // Ê®°Êì¨ AI ÂõûÊáâ
    Future.delayed(const Duration(milliseconds: 1500), () {
      _generateAIResponse(text);
    });
  }

  void _generateAIResponse(String userMessage) {
    String aiResponse = '';
    List<String>? suggestions;

    final lowerMessage = userMessage.toLowerCase();

    if (lowerMessage.contains('Á†¥ÂÜ∞') || lowerMessage.contains('ÈñãÂßãÂ∞çË©±')) {
      aiResponse = '''Âü∫Êñº‰Ω†ÂÄëÁöÑÂÖ±ÂêåËààË∂£ÔºåÊàëÊé®Ëñ¶ÈÄô‰∫õÁ†¥ÂÜ∞Ë©±È°åÔºö

üéµ **Èü≥Ê®ÇË©±È°å**
"ÊàëÁúãÂà∞‰Ω†ÂñúÊ≠° [Èü≥Ê®ÇÈ°ûÂûã]ÔºåÊúâ‰ªÄÈ∫ºÊé®Ëñ¶ÁöÑÊ≠åÊâãÂóéÔºü"

üèÉ‚Äç‚ôÄÔ∏è **ÈÅãÂãïË©±È°å**  
"‰Ω†Âπ≥ÊôÇÂñúÊ≠°‰ªÄÈ∫ºÈÅãÂãïÔºüÊàë‰πüÂú®Â∞ãÊâæÈÅãÂãïÂ§•‰º¥Âë¢ÔºÅ"

üì± **ËºïÈ¨ÜË©±È°å**
"‰Ω†ÁöÑÁÖßÁâáÂæàÊúâË∂£ÔºÅÈÇ£ÊòØÂú®Âì™Ë£°ÊãçÁöÑÔºü"

Ë®ò‰ΩèÔºåÁúüË™†ÂíåÂ•ΩÂ•áÂøÉÊòØÊúÄÂ•ΩÁöÑÁ†¥ÂÜ∞Â∑•ÂÖ∑ÔºÅ''';
      
      suggestions = ['Á¥ÑÊúÉÂú∞ÈªûÂª∫Ë≠∞', 'Â¶Ç‰Ωï‰øùÊåÅÂ∞çË©±', '‰∏ã‰∏ÄÊ≠•ÊÄéÈ∫ºÂÅö'];
    } else if (lowerMessage.contains('Á¥ÑÊúÉ') || lowerMessage.contains('Âú∞Èªû')) {
      aiResponse = '''Ê†πÊìöÈ¶ôÊ∏ØÁöÑÁÜ±ÈñÄÁ¥ÑÊúÉÂú∞ÈªûÔºåÊàëÁÇ∫‰Ω†Êé®Ëñ¶Ôºö

‚òï **ËºïÈ¨ÜÁ¨¨‰∏ÄÊ¨°Á¥ÑÊúÉ**
‚Ä¢ ‰∏≠Áí∞ÂíñÂï°Âª≥ - ËºïÈ¨ÜËÅäÂ§©Áí∞Â¢É
‚Ä¢ Â§™Âè§Âª£Â†¥ - Ë≥ºÁâ©+Áî®È§ê

üåÖ **Êµ™Êº´Á¥ÑÊúÉ**
‚Ä¢ Â±±È†ÇÁ∫úËªä - Ê¨£Ë≥ûÂ§úÊôØ
‚Ä¢ ÊòüÂÖâÂ§ßÈÅì - Êµ∑ÈÇäÊï£Ê≠•

üéØ **‰∫íÂãïÂºèÁ¥ÑÊúÉ**
‚Ä¢ Êµ∑Ê¥ãÂÖ¨Âúí - Âà∫ÊøÄÊúâË∂£
‚Ä¢ ÂØÜÂÆ§ÈÄÉËÑ´ - Â¢ûÈÄ≤ÈªòÂ•ë

ÈÅ∏ÊìáÁ¨¶Âêà‰Ω†ÂÄëÂÖ±ÂêåËààË∂£ÁöÑÂú∞ÈªûÊúÄÈáçË¶ÅÔºÅ''';
      
      suggestions = ['Â∞çË©±ÊäÄÂ∑ß', 'Á¥ÑÊúÉÊ∫ñÂÇô', 'ÂæåÁ∫åÁôºÂ±ï'];
    } else if (lowerMessage.contains('Èóú‰øÇ') || lowerMessage.contains('ÈÄ≤Â±ï')) {
      aiResponse = '''Èóú‰øÇÁôºÂ±ïÈúÄË¶ÅÂæ™Â∫èÊº∏ÈÄ≤Ôºö

üìÖ **ÂàùÊúüÈöéÊÆµ (1-2ÈÄ±)**
‚Ä¢ ‰øùÊåÅË¶èÂæã‰ΩÜ‰∏çÈÅéÂàÜÁöÑËÅØÁπ´
‚Ä¢ ÂàÜ‰∫´Êó•Â∏∏ÁîüÊ¥ªÁâáÊÆµ
‚Ä¢ Â±ïÁèæÁúüÂØ¶ÁöÑËá™Â∑±

üíï **ÁôºÂ±ïÈöéÊÆµ (2-4ÈÄ±)**
‚Ä¢ ÂÆâÊéíÈù¢Â∞çÈù¢Á¥ÑÊúÉ
‚Ä¢ Ê∑±ÂÖ•‰∫ÜËß£Â∞çÊñπÂÉπÂÄºËßÄ
‚Ä¢ Âª∫Á´ãÊÉÖÊÑüÈÄ£Êé•

ü§ù **Á©©ÂÆöÈöéÊÆµ (1ÂÄãÊúà+)**
‚Ä¢ Ë®éË´ñÊú™‰æÜË¶èÂäÉ
‚Ä¢ ‰ªãÁ¥πÁµ¶ÊúãÂèãÂúà
‚Ä¢ Á¢∫Á´ãÈóú‰øÇÁãÄÊÖã

ÊØèÂÄã‰∫∫ÁöÑÁØÄÂ•è‰∏çÂêåÔºåË¶ÅÂ∞äÈáçÂΩºÊ≠§ÁöÑÊÑüÂèóÔºÅ''';
      
      suggestions = ['Â¶Ç‰ΩïË°®ÈÅîÊÑüÊÉÖ', 'ËôïÁêÜÂàÜÊ≠ß', 'MBTIÂÖºÂÆπÊÄß'];
    } else {
      aiResponse = '''ÊàëÁêÜËß£‰Ω†ÁöÑÂïèÈ°å„ÄÇ‰ΩúÁÇ∫ AI ÊÑõÊÉÖÈ°ßÂïèÔºåÊàëÂª∫Ë≠∞Ôºö

üí° **ÂÄãÊÄßÂåñÂª∫Ë≠∞**
Ê†πÊìö‰Ω†ÁöÑÂÖ∑È´îÊÉÖÊ≥ÅÔºåÊàëÈúÄË¶ÅÊõ¥Â§öË≥áË®ä‰æÜÊèê‰æõÁ≤æÊ∫ñÂª∫Ë≠∞„ÄÇ

üéØ **ÈÄöÁî®ÂéüÂâá**
‚Ä¢ ‰øùÊåÅÁúüË™†ÂíåÈñãÊîæÁöÑÊÖãÂ∫¶
‚Ä¢ ËÅÜËÅΩÊØîË™™Ë©±Êõ¥ÈáçË¶Å
‚Ä¢ Áµ¶Â∞çÊñπÊôÇÈñìÂíåÁ©∫Èñì

üìû **ÈÄ≤‰∏ÄÊ≠•Ë´ÆË©¢**
Â¶ÇÊûú‰Ω†ÊúâÂÖ∑È´îÁöÑÊÉÖÊ≥ÅÊÉ≥Ë®éË´ñÔºåË´ãË©≥Á¥∞ÊèèËø∞ÔºåÊàëÊúÉÊèê‰æõÊõ¥ÊúâÈáùÂ∞çÊÄßÁöÑÂª∫Ë≠∞„ÄÇ''';
      
      suggestions = ['Á†¥ÂÜ∞Ë©±È°åÂª∫Ë≠∞', 'Á¥ÑÊúÉË¶èÂäÉ', 'Èóú‰øÇÂïèÈ°å'];
    }

    setState(() {
      _messages.add(
        ChatMessage(
          text: aiResponse,
          isUser: false,
          timestamp: DateTime.now(),
          suggestions: suggestions,
        ),
      );
    });

    _scrollToBottom();
  }

  void _scrollToBottom() {
    Future.delayed(const Duration(milliseconds: 100), () {
      if (_scrollController.hasClients) {
        _scrollController.animateTo(
          _scrollController.position.maxScrollExtent,
          duration: const Duration(milliseconds: 300),
          curve: Curves.easeOut,
        );
      }
    });
  }

  void _showAIFeatures() {
    showModalBottomSheet(
      context: context,
      backgroundColor: Colors.transparent,
      isScrollControlled: true,
      builder: (context) => Container(
        margin: const EdgeInsets.all(16),
        decoration: BoxDecoration(
          color: Colors.white,
          borderRadius: BorderRadius.circular(24),
        ),
        child: Column(
          mainAxisSize: MainAxisSize.min,
          children: [
            Container(
              width: 40,
              height: 4,
              margin: const EdgeInsets.only(top: 12),
              decoration: BoxDecoration(
                color: Colors.grey.shade300,
                borderRadius: BorderRadius.circular(2),
              ),
            ),
            Padding(
              padding: const EdgeInsets.all(24),
              child: Column(
                children: [
                  const Text(
                    'AI ÊÑõÊÉÖÈ°ßÂïèÂäüËÉΩ',
                    style: TextStyle(
                      fontSize: 20,
                      fontWeight: FontWeight.bold,
                      color: Color(0xFFE91E63),
                    ),
                  ),
                  const SizedBox(height: 20),
                  _buildFeatureItem(
                    icon: Icons.forum,
                    title: 'Á†¥ÂÜ∞Ë©±È°åÁîüÊàê',
                    description: 'Âü∫ÊñºÂÖ±ÂêåËààË∂£ÁöÑÂÄãÊÄßÂåñÈñãÂ†¥ÁôΩ',
                  ),
                  _buildFeatureItem(
                    icon: Icons.location_on,
                    title: 'Á¥ÑÊúÉÂú∞ÈªûÊé®Ëñ¶',
                    description: 'È¶ôÊ∏ØÊú¨Âú∞ÁÜ±ÈñÄÁ¥ÑÊúÉÂ†¥ÊâÄÂª∫Ë≠∞',
                  ),
                  _buildFeatureItem(
                    icon: Icons.psychology,
                    title: 'Â∞çË©±ÊäÄÂ∑ßÊåáÂ∞é',
                    description: 'ÊèêÂçáËÅäÂ§©ÊäÄÂ∑ßÂíåÊ∫ùÈÄöÊïàÊûú',
                  ),
                  _buildFeatureItem(
                    icon: Icons.favorite,
                    title: 'Èóú‰øÇÁôºÂ±ïÂª∫Ë≠∞',
                    description: 'Âæ™Â∫èÊº∏ÈÄ≤ÁöÑÈóú‰øÇÁôºÂ±ïÁ≠ñÁï•',
                  ),
                ],
              ),
            ),
          ],
        ),
      ),
    );
  }

  Widget _buildFeatureItem({
    required IconData icon,
    required String title,
    required String description,
  }) {
    return Padding(
      padding: const EdgeInsets.only(bottom: 16),
      child: Row(
        children: [
          Container(
            width: 48,
            height: 48,
            decoration: BoxDecoration(
              color: const Color(0xFFE91E63).withOpacity(0.1),
              borderRadius: BorderRadius.circular(12),
            ),
            child: Icon(
              icon,
              color: const Color(0xFFE91E63),
              size: 24,
            ),
          ),
          const SizedBox(width: 16),
          Expanded(
            child: Column(
              crossAxisAlignment: CrossAxisAlignment.start,
              children: [
                Text(
                  title,
                  style: const TextStyle(
                    fontSize: 16,
                    fontWeight: FontWeight.w600,
                  ),
                ),
                const SizedBox(height: 4),
                Text(
                  description,
                  style: TextStyle(
                    fontSize: 14,
                    color: Colors.grey.shade600,
                  ),
                ),
              ],
            ),
          ),
        ],
      ),
    );
  }

  String _formatTime(DateTime time) {
    final now = DateTime.now();
    final difference = now.difference(time);

    if (difference.inMinutes < 1) {
      return 'ÂâõÂâõ';
    } else if (difference.inMinutes < 60) {
      return '${difference.inMinutes}ÂàÜÈêòÂâç';
    } else if (difference.inHours < 24) {
      return '${difference.inHours}Â∞èÊôÇÂâç';
    } else {
      return '${time.day}/${time.month}';
    }
  }

  @override
  void dispose() {
    _messageController.dispose();
    _scrollController.dispose();
    super.dispose();
  }
}

class ChatMessage {
  final String text;
  final bool isUser;
  final DateTime timestamp;
  final List<String>? suggestions;

  ChatMessage({
    required this.text,
    required this.isUser,
    required this.timestamp,
    this.suggestions,
  });
} 