import 'package:flutter/material.dart';
import 'package:flutter_riverpod/flutter_riverpod.dart';
import '../../core/services/admin_service.dart';

class AdminPanelPage extends ConsumerStatefulWidget {
  const AdminPanelPage({super.key});

  @override
  ConsumerState<AdminPanelPage> createState() => _AdminPanelPageState();
}

class _AdminPanelPageState extends ConsumerState<AdminPanelPage> {
  Map<String, dynamic> _stats = {};
  bool _isLoading = false;

  @override
  void initState() {
    super.initState();
    _loadStats();
  }

  Future<void> _loadStats() async {
    setState(() {
      _isLoading = true;
    });

    try {
      final stats = await AdminService.getUserStats();
      setState(() {
        _stats = stats;
      });
    } catch (e) {
      if (mounted) {
        ScaffoldMessenger.of(context).showSnackBar(
          SnackBar(
            content: Text('ËºâÂÖ•Áµ±Ë®àÂ§±Êïó: $e'),
            backgroundColor: Colors.red,
          ),
        );
      }
    } finally {
      setState(() {
        _isLoading = false;
      });
    }
  }

  @override
  Widget build(BuildContext context) {
    // Ê™¢Êü•ÁÆ°ÁêÜÂì°Ê¨äÈôê
    if (!AdminService.isCurrentUserAdmin()) {
      return Scaffold(
        appBar: AppBar(
          title: const Text('Ê¨äÈôê‰∏çË∂≥'),
        ),
        body: const Center(
          child: Column(
            mainAxisAlignment: MainAxisAlignment.center,
            children: [
              Icon(
                Icons.lock,
                size: 80,
                color: Colors.grey,
              ),
              SizedBox(height: 16),
              Text(
                'ÊÇ®Ê≤íÊúâÁÆ°ÁêÜÂì°Ê¨äÈôê',
                style: TextStyle(
                  fontSize: 18,
                  fontWeight: FontWeight.bold,
                ),
              ),
              SizedBox(height: 8),
              Text(
                'Ë´ãËÅØÁπ´Á≥ªÁµ±ÁÆ°ÁêÜÂì°',
                style: TextStyle(
                  fontSize: 14,
                  color: Colors.grey,
                ),
              ),
            ],
          ),
        ),
      );
    }

    return Scaffold(
      backgroundColor: Colors.grey.shade50,
      appBar: AppBar(
        title: const Text(
          'üîë ÁÆ°ÁêÜÂì°Èù¢Êùø',
          style: TextStyle(
            fontWeight: FontWeight.bold,
            color: Color(0xFFE91E63),
          ),
        ),
        backgroundColor: Colors.white,
        elevation: 0,
        actions: [
          IconButton(
            onPressed: _loadStats,
            icon: const Icon(Icons.refresh),
            tooltip: 'ÈáçÊñ∞ËºâÂÖ•Áµ±Ë®à',
          ),
        ],
      ),
      body: _isLoading
          ? const Center(child: CircularProgressIndicator())
          : SingleChildScrollView(
              padding: const EdgeInsets.all(16),
              child: Column(
                crossAxisAlignment: CrossAxisAlignment.start,
                children: [
                  // Á≥ªÁµ±Áµ±Ë®à
                  _buildStatsSection(),
                  
                  const SizedBox(height: 24),
                  
                  // Áî®Êà∂ÁÆ°ÁêÜ
                  _buildUserManagementSection(),
                  
                  const SizedBox(height: 24),
                  
                  // Êï∏ÊìöÁÆ°ÁêÜ
                  _buildDataManagementSection(),
                  
                  const SizedBox(height: 24),
                  
                  // Ê∏¨Ë©¶Â∑•ÂÖ∑
                  _buildTestToolsSection(),
                ],
              ),
            ),
    );
  }

  Widget _buildStatsSection() {
    return Card(
      elevation: 4,
      shape: RoundedRectangleBorder(
        borderRadius: BorderRadius.circular(12),
      ),
      child: Padding(
        padding: const EdgeInsets.all(20),
        child: Column(
          crossAxisAlignment: CrossAxisAlignment.start,
          children: [
            const Row(
              children: [
                Icon(
                  Icons.analytics,
                  color: Color(0xFFE91E63),
                  size: 24,
                ),
                SizedBox(width: 12),
                Text(
                  'Á≥ªÁµ±Áµ±Ë®à',
                  style: TextStyle(
                    fontSize: 20,
                    fontWeight: FontWeight.bold,
                  ),
                ),
              ],
            ),
            const SizedBox(height: 20),
            
            Row(
              children: [
                Expanded(
                  child: _buildStatCard(
                    'Á∏ΩÁî®Êà∂Êï∏',
                    '${_stats['totalUsers'] ?? 0}',
                    Icons.people,
                    Colors.blue,
                  ),
                ),
                const SizedBox(width: 12),
                Expanded(
                  child: _buildStatCard(
                    'Ê¥ªË∫çÁî®Êà∂',
                    '${_stats['activeUsers'] ?? 0}',
                    Icons.person_outline,
                    Colors.green,
                  ),
                ),
              ],
            ),
            
            const SizedBox(height: 12),
            
            Row(
              children: [
                Expanded(
                  child: _buildStatCard(
                    'Á∏ΩÊ∂àÊÅØÊï∏',
                    '${_stats['totalMessages'] ?? 0}',
                    Icons.message,
                    Colors.orange,
                  ),
                ),
                const SizedBox(width: 12),
                Expanded(
                  child: _buildStatCard(
                    'AI ÂàÜÊûê',
                    '${_stats['totalAnalysis'] ?? 0}',
                    Icons.psychology,
                    Colors.purple,
                  ),
                ),
              ],
            ),
          ],
        ),
      ),
    );
  }

  Widget _buildStatCard(String title, String value, IconData icon, Color color) {
    return Container(
      padding: const EdgeInsets.all(16),
      decoration: BoxDecoration(
        color: color.withOpacity(0.1),
        borderRadius: BorderRadius.circular(8),
        border: Border.all(
          color: color.withOpacity(0.3),
          width: 1,
        ),
      ),
      child: Column(
        children: [
          Icon(
            icon,
            color: color,
            size: 32,
          ),
          const SizedBox(height: 8),
          Text(
            value,
            style: TextStyle(
              fontSize: 24,
              fontWeight: FontWeight.bold,
              color: color,
            ),
          ),
          const SizedBox(height: 4),
          Text(
            title,
            style: TextStyle(
              fontSize: 12,
              color: Colors.grey.shade600,
            ),
            textAlign: TextAlign.center,
          ),
        ],
      ),
    );
  }

  Widget _buildUserManagementSection() {
    return Card(
      elevation: 4,
      shape: RoundedRectangleBorder(
        borderRadius: BorderRadius.circular(12),
      ),
      child: Padding(
        padding: const EdgeInsets.all(20),
        child: Column(
          crossAxisAlignment: CrossAxisAlignment.start,
          children: [
            const Row(
              children: [
                Icon(
                  Icons.manage_accounts,
                  color: Color(0xFFE91E63),
                  size: 24,
                ),
                SizedBox(width: 12),
                Text(
                  'Áî®Êà∂ÁÆ°ÁêÜ',
                  style: TextStyle(
                    fontSize: 20,
                    fontWeight: FontWeight.bold,
                  ),
                ),
              ],
            ),
            const SizedBox(height: 16),
            
            _buildActionButton(
              'ÈáçÁΩÆÁî®Êà∂ÂØÜÁ¢º',
              'ÁôºÈÄÅÂØÜÁ¢ºÈáçÁΩÆÈÉµ‰ª∂Áµ¶ÊåáÂÆöÁî®Êà∂',
              Icons.lock_reset,
              Colors.orange,
              () => _showResetPasswordDialog(),
            ),
          ],
        ),
      ),
    );
  }

  Widget _buildDataManagementSection() {
    return Card(
      elevation: 4,
      shape: RoundedRectangleBorder(
        borderRadius: BorderRadius.circular(12),
      ),
      child: Padding(
        padding: const EdgeInsets.all(20),
        child: Column(
          crossAxisAlignment: CrossAxisAlignment.start,
          children: [
            const Row(
              children: [
                Icon(
                  Icons.storage,
                  color: Color(0xFFE91E63),
                  size: 24,
                ),
                SizedBox(width: 12),
                Text(
                  'Êï∏ÊìöÁÆ°ÁêÜ',
                  style: TextStyle(
                    fontSize: 20,
                    fontWeight: FontWeight.bold,
                  ),
                ),
              ],
            ),
            const SizedBox(height: 16),
            
            _buildActionButton(
              'Ê∏ÖÁêÜÊ∏¨Ë©¶Êï∏Êìö',
              'Âà™Èô§ÊâÄÊúâÊ∏¨Ë©¶Ê∂àÊÅØÂíåËá®ÊôÇÊï∏Êìö',
              Icons.cleaning_services,
              Colors.red,
              () => _confirmAction(
                'Ê∏ÖÁêÜÊ∏¨Ë©¶Êï∏Êìö',
                'Á¢∫ÂÆöË¶ÅÂà™Èô§ÊâÄÊúâÊ∏¨Ë©¶Êï∏ÊìöÂóéÔºüÊ≠§Êìç‰ΩúÁÑ°Ê≥ïÊí§Èä∑„ÄÇ',
                () => _executeAction('Ê∏ÖÁêÜÊ∏¨Ë©¶Êï∏Êìö', AdminService.cleanupTestData),
              ),
            ),
          ],
        ),
      ),
    );
  }

  Widget _buildTestToolsSection() {
    return Card(
      elevation: 4,
      shape: RoundedRectangleBorder(
        borderRadius: BorderRadius.circular(12),
      ),
      child: Padding(
        padding: const EdgeInsets.all(20),
        child: Column(
          crossAxisAlignment: CrossAxisAlignment.start,
          children: [
            const Row(
              children: [
                Icon(
                  Icons.build,
                  color: Color(0xFFE91E63),
                  size: 24,
                ),
                SizedBox(width: 12),
                Text(
                  'Ê∏¨Ë©¶Â∑•ÂÖ∑',
                  style: TextStyle(
                    fontSize: 20,
                    fontWeight: FontWeight.bold,
                  ),
                ),
              ],
            ),
            const SizedBox(height: 16),
            
            _buildActionButton(
              'ÂâµÂª∫Ê∏¨Ë©¶Áî®Êà∂',
              'ÁîüÊàêÊ∏¨Ë©¶Áî®Êà∂Ê™îÊ°àÁî®ÊñºÈñãÁôºÊ∏¨Ë©¶',
              Icons.person_add,
              Colors.blue,
              () => _executeAction('ÂâµÂª∫Ê∏¨Ë©¶Áî®Êà∂', AdminService.createTestUsers),
            ),
            
            const SizedBox(height: 12),
            
            _buildActionButton(
              'ÁîüÊàêÊ∏¨Ë©¶ËÅäÂ§©',
              'ÂâµÂª∫Ê∏¨Ë©¶ËÅäÂ§©Ë®òÈåÑÁî®Êñº AI ÂàÜÊûêÊ∏¨Ë©¶',
              Icons.chat,
              Colors.green,
              () => _executeAction('ÁîüÊàêÊ∏¨Ë©¶ËÅäÂ§©', AdminService.generateTestChatData),
            ),
          ],
        ),
      ),
    );
  }

  Widget _buildActionButton(
    String title,
    String subtitle,
    IconData icon,
    Color color,
    VoidCallback onPressed,
  ) {
    return Container(
      width: double.infinity,
      margin: const EdgeInsets.only(bottom: 8),
      child: ElevatedButton(
        onPressed: onPressed,
        style: ElevatedButton.styleFrom(
          backgroundColor: color.withOpacity(0.1),
          foregroundColor: color,
          elevation: 0,
          padding: const EdgeInsets.all(16),
          shape: RoundedRectangleBorder(
            borderRadius: BorderRadius.circular(8),
            side: BorderSide(
              color: color.withOpacity(0.3),
              width: 1,
            ),
          ),
        ),
        child: Row(
          children: [
            Icon(icon, size: 24),
            const SizedBox(width: 16),
            Expanded(
              child: Column(
                crossAxisAlignment: CrossAxisAlignment.start,
                children: [
                  Text(
                    title,
                    style: const TextStyle(
                      fontSize: 16,
                      fontWeight: FontWeight.w600,
                    ),
                  ),
                  const SizedBox(height: 4),
                  Text(
                    subtitle,
                    style: TextStyle(
                      fontSize: 12,
                      color: Colors.grey.shade600,
                    ),
                  ),
                ],
              ),
            ),
            const Icon(Icons.arrow_forward_ios, size: 16),
          ],
        ),
      ),
    );
  }

  void _showResetPasswordDialog() {
    final emailController = TextEditingController();
    
    showDialog(
      context: context,
      builder: (context) => AlertDialog(
        title: const Text('ÈáçÁΩÆÁî®Êà∂ÂØÜÁ¢º'),
        content: Column(
          mainAxisSize: MainAxisSize.min,
          children: [
            const Text('Ë´ãËº∏ÂÖ•Ë¶ÅÈáçÁΩÆÂØÜÁ¢ºÁöÑÁî®Êà∂ÈõªÂ≠êÈÉµ‰ª∂Ôºö'),
            const SizedBox(height: 16),
            TextField(
              controller: emailController,
              decoration: const InputDecoration(
                labelText: 'ÈõªÂ≠êÈÉµ‰ª∂',
                border: OutlineInputBorder(),
              ),
              keyboardType: TextInputType.emailAddress,
            ),
          ],
        ),
        actions: [
          TextButton(
            onPressed: () => Navigator.pop(context),
            child: const Text('ÂèñÊ∂à'),
          ),
          ElevatedButton(
            onPressed: () async {
              final email = emailController.text.trim();
              if (email.isNotEmpty) {
                Navigator.pop(context);
                final success = await AdminService.resetUserPassword(email);
                if (mounted) {
                  ScaffoldMessenger.of(context).showSnackBar(
                    SnackBar(
                      content: Text(
                        success 
                            ? 'ÂØÜÁ¢ºÈáçÁΩÆÈÉµ‰ª∂Â∑≤ÁôºÈÄÅÂà∞ $email'
                            : 'ÁôºÈÄÅÂØÜÁ¢ºÈáçÁΩÆÈÉµ‰ª∂Â§±Êïó',
                      ),
                      backgroundColor: success ? Colors.green : Colors.red,
                    ),
                  );
                }
              }
            },
            child: const Text('ÁôºÈÄÅ'),
          ),
        ],
      ),
    );
  }

  void _confirmAction(String title, String message, VoidCallback onConfirm) {
    showDialog(
      context: context,
      builder: (context) => AlertDialog(
        title: Text(title),
        content: Text(message),
        actions: [
          TextButton(
            onPressed: () => Navigator.pop(context),
            child: const Text('ÂèñÊ∂à'),
          ),
          ElevatedButton(
            onPressed: () {
              Navigator.pop(context);
              onConfirm();
            },
            style: ElevatedButton.styleFrom(
              backgroundColor: Colors.red,
              foregroundColor: Colors.white,
            ),
            child: const Text('Á¢∫Ë™ç'),
          ),
        ],
      ),
    );
  }

  Future<void> _executeAction(String actionName, Future<bool> Function() action) async {
    try {
      final success = await action();
      if (mounted) {
        ScaffoldMessenger.of(context).showSnackBar(
          SnackBar(
            content: Text(
              success ? '$actionName ÊàêÂäü' : '$actionName Â§±Êïó',
            ),
            backgroundColor: success ? Colors.green : Colors.red,
          ),
        );
        
        if (success) {
          // ÈáçÊñ∞ËºâÂÖ•Áµ±Ë®à
          _loadStats();
        }
      }
    } catch (e) {
      if (mounted) {
        ScaffoldMessenger.of(context).showSnackBar(
          SnackBar(
            content: Text('$actionName ÈåØË™§: $e'),
            backgroundColor: Colors.red,
          ),
        );
      }
    }
  }
} 